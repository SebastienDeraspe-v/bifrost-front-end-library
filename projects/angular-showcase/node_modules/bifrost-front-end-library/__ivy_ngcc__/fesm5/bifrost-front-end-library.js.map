{"version":3,"file":"bifrost-front-end-library.js","sources":["ng:/bifrost-front-end-library/lib/components/accordion/angular/accordion.component.ts","ng:/bifrost-front-end-library/lib/components/accordion/angular/accordion.module.ts","ng:/bifrost-front-end-library/lib/components/button/angular/button.component.ts","ng:/bifrost-front-end-library/lib/components/button/angular/button.module.ts","ng:/bifrost-front-end-library/lib/components/icon/angular/icon.component.ts","ng:/bifrost-front-end-library/lib/components/icon/angular/icon.module.ts","ng:/bifrost-front-end-library/public-api.ts","ng:/bifrost-front-end-library/bifrost-front-end-library.ts"],"names":["__decorate"],"mappings":"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","sourcesContent":["import { Component, ViewEncapsulation, OnInit, Input } from \"@angular/core\";\n\n/**\n * Description of the component Accordion\n *\n */\n \n@Component({\n  selector: \"bf-accordion\",\n  templateUrl: './accordion.component.html',\n  styleUrls: ['../common/style.scss'],\n//   encapsulation: ViewEncapsulation.None\n})\nexport class AccordionComponent implements OnInit {\n    constructor() {}\n\n    /**\n    * The inner text.\n    *\n    * @required\n    */\n    @Input() label: string;\n\n    /** Class override */\n    @Input() styleClass: string;\n\n    ngOnInit() {\n        console.log('Accordion', this);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { AccordionComponent } from './accordion.component';\n\n@NgModule({\n  declarations: [AccordionComponent],\n  imports: [\n  ],\n  exports: [AccordionComponent]\n})\nexport class AccordionModule { }\n","import { Component, ViewEncapsulation, OnInit, Input, Output, EventEmitter} from \"@angular/core\";\n\n/**\n * API is the same between **Angular** and **Drupal**.\n *\n */\n \n@Component({\n  selector: \"bf-button\",\n  templateUrl: './button.component.html',\n  styleUrls: ['../common/style.scss'],\n})\nexport class ButtonComponent implements OnInit {\n  constructor() {}\n\n  /** This input will not be displayed in Storybook docs.\n  * @ignore\n  */\n  @Input() exampleOfIgnore: boolean;\n\n  /**\n   * The inner text of the button.\n   * @required\n   */\n  @Input() label: string;\n\n  /** Sets the button to a disabled state. */\n  @Input() disabled: boolean;\n\n  /** Sets the color of the button. \n    *\n    * @values primary | primary-alt | primary-alt-reversed | secondary | secondary-reversed | tertiary | tertiary-reversed\n    */\n  @Input() color: string;\n\n  /** Variant  \n    * @values csr\n    */\n  @Input() variant: string = '';\n\n  /** Sets the contrast mode. */\n  @Input() reversed: boolean;\n\n  /** Sets the button in mobile mode (full width). */\n  @Input() fullWidth: boolean;\n\n  /** Name of the icon */\n  @Input() icon: string;\n\n  /** Class override */\n  @Input() styleClass: string;\n\n  /**\n   * Handler to be called when the button is clicked by a user.\n   *\n   * Will also block the emission of the event if `disabled` is true.\n   */\n  @Output() click: EventEmitter<boolean> = new EventEmitter();\n\n  ngOnInit() {\n      console.log('button', this);\n  }\n\n  onClick() {\n    this.click.emit(true);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ButtonComponent } from './button.component';\n\n@NgModule({\n  declarations: [ButtonComponent],\n  imports: [],\n  exports: [ButtonComponent]\n})\nexport class ButtonModule { }\n","import { Component, ViewEncapsulation, OnInit, Input, Output, EventEmitter} from \"@angular/core\";\n\n/**\n * API is the same between **Angular** and **Drupal**.\n *\n */\n \n@Component({\n  selector: \"bf-icon\",\n  templateUrl: './icon.component.html',\n//   styleUrls: ['../common/style.scss'],\n})\nexport class IconComponent implements OnInit {\n  constructor() {}\n\n  /** Sets the color of the icon. */\n  @Input() color: string;\n\n  /** Sets the size of the icon. */\n  @Input() size: string;\n\n  /** Class override */\n  @Input() styleClass: string;\n\n  ngOnInit() {\n      console.log('icon', this);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [],\n  exports: [IconComponent]\n})\nexport class IconModule { }\n","/*\n * Public API Surface of front-end-library\n * NOTE: Please, do NOT remove comments: // Components, // Organisms and // Templates. \n * Because we plan to use them in `scripts/generate.js` to dynamically append the export in the right section of this file.\n */\n\n// Components\nexport * from './lib/components/accordion/angular/accordion.component';\nexport * from './lib/components/accordion/angular/accordion.module';\n\nexport * from './lib/components/button/angular/button.component';\nexport * from './lib/components/button/angular/button.module';\n\nexport * from './lib/components/icon/angular/icon.component';\nexport * from './lib/components/icon/angular/icon.module';\n\n// Organisms\n// Add organisms export here\n\n// Templates\n// Add template export here\n\n// Lib\n// export * from './lib.module';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}