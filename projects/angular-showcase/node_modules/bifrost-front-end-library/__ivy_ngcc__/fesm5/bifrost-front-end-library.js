import { Input, Component, NgModule, EventEmitter, Output, ViewEncapsulation } from '@angular/core';

import * as ɵngcc0 from '@angular/core';

var _c0 = ["*"];
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Description of the component Accordion
 *
 */
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent() {
    }
    AccordionComponent.prototype.ngOnInit = function () {
        console.log('Accordion', this);
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "label", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], AccordionComponent.prototype, "styleClass", void 0);
    AccordionComponent = __decorate([ __metadata("design:paramtypes", [])
    ], AccordionComponent);
AccordionComponent.ɵfac = function AccordionComponent_Factory(t) { return new (t || AccordionComponent)(); };
AccordionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AccordionComponent, selectors: [["bf-accordion"]], inputs: { label: "label", styleClass: "styleClass" }, ngContentSelectors: _c0, decls: 3, vars: 1, consts: [[1, "bf-accordion"]], template: function AccordionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, " ");
    } }, styles: [".bf-accordion[_ngcontent-%COMP%]{padding:1rem;background-color:red}"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AccordionComponent, [{
        type: Component,
        args: [{
                selector: "bf-accordion",
                template: "<!--\n\n    Edit this component and don't forget to delete this comment.\n    \n    In your component, the file /common/style.scss is aimed to share styles across Twig and Angular. \n    Try to use it as much as possible, in order to avoid styles for specific framework.\n\n    Command `npm run storybook` will watch all scss changes (thanks Gulp) in this project\n    and compile it to CSS, so this new Twig component will be loaded with your changes in /common/style.scss.\n    \n    Enjoy :) \n\n-->\n\n<div class='bf-accordion'>\n    {{ label }}\n    <ng-content></ng-content>\n</div>",
                styles: [".bf-accordion{padding:1rem;background-color:red}"]
            }]
    }], function () { return []; }, { label: [{
            type: Input
        }], styleClass: [{
            type: Input
        }] }); })();
    return AccordionComponent;
}());

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var AccordionModule = /** @class */ (function () {
    function AccordionModule() {
    }
AccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AccordionModule });
AccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AccordionModule_Factory(t) { return new (t || AccordionModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AccordionModule, { declarations: [AccordionComponent], exports: [AccordionComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AccordionModule, [{
        type: NgModule,
        args: [{
                declarations: [AccordionComponent],
                imports: [],
                exports: [AccordionComponent]
            }]
    }], function () { return []; }, null); })();
    return AccordionModule;
}());

var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * API is the same between **Angular** and **Drupal**.
 *
 */
var ButtonComponent = /** @class */ (function () {
    function ButtonComponent() {
        /** Sets the visual type of the button . */
        this.size = '' || 'sm' || 'md' || 'lg';
        /** Sets the color of the button . */
        this.color = 'primary' || 'secondary' || 'reverse';
        /** Variant  */
        this.variant = 'business';
        /**
         * Handler to be called when the button is clicked by a user.
         *
         * Will also block the emission of the event if `disabled` is true.
         */
        this.click = new EventEmitter();
    }
    ButtonComponent.prototype.ngOnInit = function () {
        console.log('button', this);
    };
    ButtonComponent.prototype.onClick = function () {
        this.click.emit(true);
    };
    __decorate$2([
        Input(),
        __metadata$1("design:type", String)
    ], ButtonComponent.prototype, "label", void 0);
    __decorate$2([
        Input(),
        __metadata$1("design:type", Boolean)
    ], ButtonComponent.prototype, "disabled", void 0);
    __decorate$2([
        Input(),
        __metadata$1("design:type", String)
    ], ButtonComponent.prototype, "size", void 0);
    __decorate$2([
        Input(),
        __metadata$1("design:type", String)
    ], ButtonComponent.prototype, "color", void 0);
    __decorate$2([
        Input(),
        __metadata$1("design:type", String)
    ], ButtonComponent.prototype, "variant", void 0);
    __decorate$2([
        Input(),
        __metadata$1("design:type", Boolean)
    ], ButtonComponent.prototype, "fullWidth", void 0);
    __decorate$2([
        Input(),
        __metadata$1("design:type", String)
    ], ButtonComponent.prototype, "icon", void 0);
    __decorate$2([
        Input(),
        __metadata$1("design:type", String)
    ], ButtonComponent.prototype, "styleClass", void 0);
    __decorate$2([
        Output(),
        __metadata$1("design:type", EventEmitter)
    ], ButtonComponent.prototype, "click", void 0);
    ButtonComponent = __decorate$2([ __metadata$1("design:paramtypes", [])
    ], ButtonComponent);
ButtonComponent.ɵfac = function ButtonComponent_Factory(t) { return new (t || ButtonComponent)(); };
ButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ButtonComponent, selectors: [["bf-button"]], inputs: { size: "size", color: "color", variant: "variant", label: "label", disabled: "disabled", fullWidth: "fullWidth", icon: "icon", styleClass: "styleClass" }, outputs: { click: "click" }, ngContentSelectors: _c0, decls: 3, vars: 7, consts: [["type", "button", 3, "disabled", "click"]], template: function ButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function ButtonComponent_Template_button_click_0_listener() { return ctx.onClick(); });
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate3("\n        btn \n        ", ctx.color ? "btn-" + ctx.color : "", "\n        ", ctx.size ? "btn-" + ctx.size : "", "\n        ", ctx.styleClass, "\n    ");
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, " ");
    } }, styles: [""], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ButtonComponent, [{
        type: Component,
        args: [{
                selector: "bf-button",
                template: "<button \n    type=\"button\" \n    class=\"\n        btn \n        {{ color ? 'btn-' + color : '' }}\n        {{ size ? 'btn-' + size : '' }}\n        {{ styleClass }}\n    \"\n    [disabled]=\"disabled\" \n    (click)=\"onClick()\"\n>\n    {{ label }}\n    <ng-content></ng-content>\n</button>",
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }]
    }], function () { return []; }, { size: [{
            type: Input
        }], color: [{
            type: Input
        }], variant: [{
            type: Input
        }], click: [{
            type: Output
        }], label: [{
            type: Input
        }], disabled: [{
            type: Input
        }], fullWidth: [{
            type: Input
        }], icon: [{
            type: Input
        }], styleClass: [{
            type: Input
        }] }); })();
    return ButtonComponent;
}());

var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var ButtonModule = /** @class */ (function () {
    function ButtonModule() {
    }
ButtonModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ButtonModule });
ButtonModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ButtonModule_Factory(t) { return new (t || ButtonModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonModule, { declarations: [ButtonComponent], exports: [ButtonComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ButtonModule, [{
        type: NgModule,
        args: [{
                declarations: [ButtonComponent],
                imports: [],
                exports: [ButtonComponent]
            }]
    }], function () { return []; }, null); })();
    return ButtonModule;
}());

/*
 * Public API Surface of front-end-library
 * NOTE: Please, do NOT remove comments: // Components, // Organisms and // Templates.
 * Because we plan to use them in `scripts/generate.js` to dynamically append the export in the right section of this file.
 */
// Organisms
// Add organisms export here
// Templates
// Add template export here

/**
 * Generated bundle index. Do not edit.
 */

export { AccordionComponent, AccordionModule, ButtonComponent, ButtonModule };

//# sourceMappingURL=bifrost-front-end-library.js.map