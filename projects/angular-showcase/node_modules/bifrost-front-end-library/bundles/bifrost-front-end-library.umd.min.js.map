{"version":3,"sources":["ng://bifrost-front-end-library/lib/components/accordion/angular/accordion.component.ts","ng://bifrost-front-end-library/lib/components/accordion/angular/accordion.module.ts","ng://bifrost-front-end-library/lib/components/button/angular/button.component.ts","ng://bifrost-front-end-library/lib/components/button/angular/button.module.ts","ng://bifrost-front-end-library/lib/components/icon/angular/icon.component.ts","ng://bifrost-front-end-library/lib/components/icon/angular/icon.module.ts"],"names":["AccordionComponent","prototype","ngOnInit","console","log","this","__decorate","Input","Component","selector","template","AccordionModule","__decorate$1","NgModule","declarations","imports","exports","ButtonComponent","variant","click","EventEmitter","onClick","emit","Output","__decorate$2","ButtonModule","__decorate$3","IconComponent","__decorate$4","IconModule","__decorate$5"],"mappings":"+xBAcI,SAAAA,KAeJ,OAHIA,EAAAC,UAAAC,SAAA,WACIC,QAAQC,IAAI,YAAaC,OANpBC,EAAA,CAARC,EAAAA,6DAGQD,EAAA,CAARC,EAAAA,kEAXQP,EAAkBM,EAAA,CAN9BE,EAAAA,UAAU,CACTC,SAAU,eACVC,SAAA,8qBAIWV,gXCJb,SAAAW,KAA+B,OAAlBA,EAAeC,EAAA,CAN3BC,EAAAA,SAAS,CACRC,aAAc,CAACd,GACfe,QAAS,GAETC,QAAS,CAAChB,MAECW,sfCIX,SAAAM,IAyBSZ,KAAAa,QAAkB,GAmBjBb,KAAAc,MAA+B,IAAIC,EAAAA,aAS/C,OAPEH,EAAAhB,UAAAC,SAAA,WACIC,QAAQC,IAAI,SAAUC,OAG1BY,EAAAhB,UAAAoB,QAAA,WACEhB,KAAKc,MAAMG,MAAK,IA9CThB,EAAAA,CAARC,EAAAA,wEAMQD,EAAAA,CAARC,EAAAA,6DAGQD,EAAAA,CAARC,EAAAA,iEAMQD,EAAAA,CAARC,EAAAA,6DAKQD,EAAAA,CAARC,EAAAA,+DAGQD,EAAAA,CAARC,EAAAA,iEAGQD,EAAAA,CAARC,EAAAA,kEAGQD,EAAAA,CAARC,EAAAA,4DAGQD,EAAAA,CAARC,EAAAA,kEAOSD,EAAAA,CAATiB,EAAAA,yBAAgBH,EAAAA,2CA7CNH,EAAeO,EAAA,CAL3BhB,EAAAA,UAAU,CACTC,SAAU,YACVC,SAAA,ixFAGWO,gXCJb,SAAAQ,KAA4B,OAAfA,EAAYC,EAAA,CALxBb,EAAAA,SAAS,CACRC,aAAc,CAACG,GACfF,QAAS,GACTC,QAAS,CAACC,MAECQ,sfCKX,SAAAE,KAcF,OAHEA,EAAA1B,UAAAC,SAAA,WACIC,QAAQC,IAAI,OAAQC,OATfC,EAAAA,CAARC,EAAAA,6DAGQD,EAAAA,CAARC,EAAAA,4DAGQD,EAAAA,CAARC,EAAAA,kEAVUoB,EAAaC,EAAA,CALzBpB,EAAAA,UAAU,CACTC,SAAU,UACVC,SAAA,usBAGWiB,gXCJb,SAAAE,KAA0B,OAAbA,EAAUC,EAAA,CALtBjB,EAAAA,SAAS,CACRC,aAAc,CAACa,GACfZ,QAAS,GACTC,QAAS,CAACW,MAECE","sourcesContent":["import { Component, ViewEncapsulation, OnInit, Input } from \"@angular/core\";\n\n/**\n * Description of the component Accordion\n *\n */\n \n@Component({\n  selector: \"bf-accordion\",\n  templateUrl: './accordion.component.html',\n  styleUrls: ['../common/style.scss'],\n//   encapsulation: ViewEncapsulation.None\n})\nexport class AccordionComponent implements OnInit {\n    constructor() {}\n\n    /**\n    * The inner text.\n    *\n    * @required\n    */\n    @Input() label: string;\n\n    /** Class override */\n    @Input() styleClass: string;\n\n    ngOnInit() {\n        console.log('Accordion', this);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { AccordionComponent } from './accordion.component';\n\n@NgModule({\n  declarations: [AccordionComponent],\n  imports: [\n  ],\n  exports: [AccordionComponent]\n})\nexport class AccordionModule { }\n","import { Component, ViewEncapsulation, OnInit, Input, Output, EventEmitter} from \"@angular/core\";\n\n/**\n * API is the same between **Angular** and **Drupal**.\n *\n */\n \n@Component({\n  selector: \"bf-button\",\n  templateUrl: './button.component.html',\n  styleUrls: ['../common/style.scss'],\n})\nexport class ButtonComponent implements OnInit {\n  constructor() {}\n\n  /** This input will not be displayed in Storybook docs.\n  * @ignore\n  */\n  @Input() exampleOfIgnore: boolean;\n\n  /**\n   * The inner text of the button.\n   * @required\n   */\n  @Input() label: string;\n\n  /** Sets the button to a disabled state. */\n  @Input() disabled: boolean;\n\n  /** Sets the color of the button. \n    *\n    * @values primary | primary-alt | primary-alt-reversed | secondary | secondary-reversed | tertiary | tertiary-reversed\n    */\n  @Input() color: string;\n\n  /** Variant  \n    * @values csr\n    */\n  @Input() variant: string = '';\n\n  /** Sets the contrast mode. */\n  @Input() reversed: boolean;\n\n  /** Sets the button in mobile mode (full width). */\n  @Input() fullWidth: boolean;\n\n  /** Name of the icon */\n  @Input() icon: string;\n\n  /** Class override */\n  @Input() styleClass: string;\n\n  /**\n   * Handler to be called when the button is clicked by a user.\n   *\n   * Will also block the emission of the event if `disabled` is true.\n   */\n  @Output() click: EventEmitter<boolean> = new EventEmitter();\n\n  ngOnInit() {\n      console.log('button', this);\n  }\n\n  onClick() {\n    this.click.emit(true);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ButtonComponent } from './button.component';\n\n@NgModule({\n  declarations: [ButtonComponent],\n  imports: [],\n  exports: [ButtonComponent]\n})\nexport class ButtonModule { }\n","import { Component, ViewEncapsulation, OnInit, Input, Output, EventEmitter} from \"@angular/core\";\n\n/**\n * API is the same between **Angular** and **Drupal**.\n *\n */\n \n@Component({\n  selector: \"bf-icon\",\n  templateUrl: './icon.component.html',\n//   styleUrls: ['../common/style.scss'],\n})\nexport class IconComponent implements OnInit {\n  constructor() {}\n\n  /** Sets the color of the icon. */\n  @Input() color: string;\n\n  /** Sets the size of the icon. */\n  @Input() size: string;\n\n  /** Class override */\n  @Input() styleClass: string;\n\n  ngOnInit() {\n      console.log('icon', this);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { IconComponent } from './icon.component';\n\n@NgModule({\n  declarations: [IconComponent],\n  imports: [],\n  exports: [IconComponent]\n})\nexport class IconModule { }\n"]}