import { Input, Component, NgModule, EventEmitter, Output, ViewEncapsulation } from '@angular/core';

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * Description of the component Accordion
 *
 */
let AccordionComponent = class AccordionComponent {
    constructor() { }
    ngOnInit() {
        console.log('Accordion', this);
    }
};
__decorate([
    Input(),
    __metadata("design:type", String)
], AccordionComponent.prototype, "label", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AccordionComponent.prototype, "styleClass", void 0);
AccordionComponent = __decorate([
    Component({
        selector: "bf-accordion",
        template: "<!--\n\n    Edit this component and don't forget to delete this comment.\n    \n    In your component, the file /common/style.scss is aimed to share styles across Twig and Angular. \n    Try to use it as much as possible, in order to avoid styles for specific framework.\n\n    Command `npm run storybook` will watch all scss changes (thanks Gulp) in this project\n    and compile it to CSS, so this new Twig component will be loaded with your changes in /common/style.scss.\n    \n    Enjoy :) \n\n-->\n\n<div class='bf-accordion'>\n    {{ label }}\n    <ng-content></ng-content>\n</div>",
        styles: [".bf-accordion{padding:1rem;background-color:red}"]
    }),
    __metadata("design:paramtypes", [])
], AccordionComponent);

var __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
let AccordionModule = class AccordionModule {
};
AccordionModule = __decorate$1([
    NgModule({
        declarations: [AccordionComponent],
        imports: [],
        exports: [AccordionComponent]
    })
], AccordionModule);

var __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata$1 = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * API is the same between **Angular** and **Drupal**.
 *
 */
let ButtonComponent = class ButtonComponent {
    constructor() {
        /** Sets the visual type of the button . */
        this.size = '' || 'sm' || 'md' || 'lg';
        /** Sets the color of the button . */
        this.color = 'primary' || 'secondary' || 'reverse';
        /** Variant  */
        this.variant = 'business';
        /**
         * Handler to be called when the button is clicked by a user.
         *
         * Will also block the emission of the event if `disabled` is true.
         */
        this.click = new EventEmitter();
    }
    ngOnInit() {
        console.log('button', this);
    }
    onClick() {
        this.click.emit(true);
    }
};
__decorate$2([
    Input(),
    __metadata$1("design:type", String)
], ButtonComponent.prototype, "label", void 0);
__decorate$2([
    Input(),
    __metadata$1("design:type", Boolean)
], ButtonComponent.prototype, "disabled", void 0);
__decorate$2([
    Input(),
    __metadata$1("design:type", String)
], ButtonComponent.prototype, "size", void 0);
__decorate$2([
    Input(),
    __metadata$1("design:type", String)
], ButtonComponent.prototype, "color", void 0);
__decorate$2([
    Input(),
    __metadata$1("design:type", String)
], ButtonComponent.prototype, "variant", void 0);
__decorate$2([
    Input(),
    __metadata$1("design:type", Boolean)
], ButtonComponent.prototype, "fullWidth", void 0);
__decorate$2([
    Input(),
    __metadata$1("design:type", String)
], ButtonComponent.prototype, "icon", void 0);
__decorate$2([
    Input(),
    __metadata$1("design:type", String)
], ButtonComponent.prototype, "styleClass", void 0);
__decorate$2([
    Output(),
    __metadata$1("design:type", EventEmitter)
], ButtonComponent.prototype, "click", void 0);
ButtonComponent = __decorate$2([
    Component({
        selector: "bf-button",
        template: "<button \n    type=\"button\" \n    class=\"\n        btn \n        {{ color ? 'btn-' + color : '' }}\n        {{ size ? 'btn-' + size : '' }}\n        {{ styleClass }}\n    \"\n    [disabled]=\"disabled\" \n    (click)=\"onClick()\"\n>\n    {{ label }}\n    <ng-content></ng-content>\n</button>",
        encapsulation: ViewEncapsulation.None,
        styles: [""]
    }),
    __metadata$1("design:paramtypes", [])
], ButtonComponent);

var __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
let ButtonModule = class ButtonModule {
};
ButtonModule = __decorate$3([
    NgModule({
        declarations: [ButtonComponent],
        imports: [],
        exports: [ButtonComponent]
    })
], ButtonModule);

/*
 * Public API Surface of front-end-library
 * NOTE: Please, do NOT remove comments: // Components, // Organisms and // Templates.
 * Because we plan to use them in `scripts/generate.js` to dynamically append the export in the right section of this file.
 */
// Organisms
// Add organisms export here
// Templates
// Add template export here

/**
 * Generated bundle index. Do not edit.
 */

export { AccordionComponent, AccordionModule, ButtonComponent, ButtonModule };
//# sourceMappingURL=bifrost-front-end-library.js.map
